// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: trade_core.proto

package trade_core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TreadeCoreServiceClient is the client API for TreadeCoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TreadeCoreServiceClient interface {
	Recharge(ctx context.Context, in *RechargeRequest, opts ...grpc.CallOption) (*RechargeResponse, error)
}

type treadeCoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTreadeCoreServiceClient(cc grpc.ClientConnInterface) TreadeCoreServiceClient {
	return &treadeCoreServiceClient{cc}
}

func (c *treadeCoreServiceClient) Recharge(ctx context.Context, in *RechargeRequest, opts ...grpc.CallOption) (*RechargeResponse, error) {
	out := new(RechargeResponse)
	err := c.cc.Invoke(ctx, "/jlu_cow_studio.trade_core.TreadeCoreService/Recharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TreadeCoreServiceServer is the server API for TreadeCoreService service.
// All implementations must embed UnimplementedTreadeCoreServiceServer
// for forward compatibility
type TreadeCoreServiceServer interface {
	Recharge(context.Context, *RechargeRequest) (*RechargeResponse, error)
	mustEmbedUnimplementedTreadeCoreServiceServer()
}

// UnimplementedTreadeCoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTreadeCoreServiceServer struct {
}

func (UnimplementedTreadeCoreServiceServer) Recharge(context.Context, *RechargeRequest) (*RechargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recharge not implemented")
}
func (UnimplementedTreadeCoreServiceServer) mustEmbedUnimplementedTreadeCoreServiceServer() {}

// UnsafeTreadeCoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TreadeCoreServiceServer will
// result in compilation errors.
type UnsafeTreadeCoreServiceServer interface {
	mustEmbedUnimplementedTreadeCoreServiceServer()
}

func RegisterTreadeCoreServiceServer(s grpc.ServiceRegistrar, srv TreadeCoreServiceServer) {
	s.RegisterService(&TreadeCoreService_ServiceDesc, srv)
}

func _TreadeCoreService_Recharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreadeCoreServiceServer).Recharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jlu_cow_studio.trade_core.TreadeCoreService/Recharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreadeCoreServiceServer).Recharge(ctx, req.(*RechargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TreadeCoreService_ServiceDesc is the grpc.ServiceDesc for TreadeCoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TreadeCoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jlu_cow_studio.trade_core.TreadeCoreService",
	HandlerType: (*TreadeCoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recharge",
			Handler:    _TreadeCoreService_Recharge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trade_core.proto",
}
